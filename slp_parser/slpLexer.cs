//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


	using System.Collections.Generic;
	using System.Text.RegularExpressions;

using System;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class slpLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, TRUE=14, FALSE=15, NULL=16, STRING=17, 
		INT=18, FLOAT=19, ID=20, OPEN_BRACE=21, CLOSE_BRACE=22, COMMENT=23, LINE_COMMENT=24, 
		OP=25, NATIVE=26, SPACES=27, OPEN_PAREN=28, CLOSE_PAREN=29, OPEN_BRACK=30, 
		CLOSE_BRACK=31, NEWLINE=32, WS=33;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "TRUE", "FALSE", "NULL", "STRING", 
		"INT", "FLOAT", "ID", "OPEN_BRACE", "CLOSE_BRACE", "COMMENT", "LINE_COMMENT", 
		"OP", "NATIVE", "SPACES", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"NEWLINE", "WS"
	};


		// The amount of opened braces, brackets and parenthesis.
		private int opened = 0;
		private Stack<int> indents = new Stack<int>();
		private IToken lastToken = null;
		private List<IToken> tokens = new List<IToken>();
		
		static int getIndentationCount(String spaces) {
	    int count = 0;
	    foreach (char ch in spaces) {
	      switch (ch) {
	        case '\t':
	          count += 8 - (count % 8);
	          break;
	        default:
	          // A normal space char.
	          count++;
			  break;
	      }
	    }

	    return count / 8;
	  }
	  
	  private CommonToken commonToken(int type, String text) {
	    int stop = this.CharIndex - 1;
	    int start = string.IsNullOrEmpty(text) ? stop : stop - text.Length + 1;
	    return new CommonToken(this._tokenFactorySourcePair, type, DefaultTokenChannel, start, stop);
	  }
	  
	  private IToken createDedent() {
	    //CommonToken dedent = commonToken(slpParser.DEDENT, "");
		CommonToken dedent = commonToken(slpParser.CLOSE_PAREN, "");
	    dedent.Line = this.lastToken.Line;
	    return dedent;
	  }
	  
	  bool atStartOfInput() {
	    return Column == 0 && Line == 1;
	  }
	  
	  override public void Emit(IToken t) {
	    Token = t;
	    tokens.Add(t);
	  }
	  
	  override public IToken NextToken() {
	    // Check if the end-of-file is ahead and there are still some DEDENTS expected.
	    if (InputStream.La(1) == Eof && this.indents.Count > 0) {
	      // Remove any trailing EOF tokens from our buffer.
	      for (int i = tokens.Count - 1; i >= 0; i--) {
	        if (tokens[i].Type == Eof) {
	          tokens.RemoveAt(i);
	        }
	      }

	      // First emit an extra line break that serves as the end of the statement.
	      this.Emit(commonToken(slpParser.NEWLINE, "\n"));

	      // Now emit as much DEDENT tokens as needed.
	      while (indents.Count > 0) {
	        this.Emit(createDedent());
	        indents.Pop();
	      }

	      // Put the EOF back on the token stream.
	      this.Emit(commonToken(slpParser.Eof, "<EOF>"));
	    }

	    IToken next = base.NextToken();

	    if (next.Channel == DefaultTokenChannel) {
	      // Keep track of the last token on the default channel.
	      this.lastToken = next;
		}

		if (tokens.Count == 0) return next;
		var first = tokens[0];
		tokens.RemoveAt(0);
	    return first;
	  }
	  


	public slpLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'fx'", "'fy'", "'xf'", "'yf'", "'xfx'", "'xfy'", "'yfx'", "'yfy'", 
		"'yfxx'", "'fxx'", "'op'", "'{'", "'}'", "'true'", "'false'", "'<>'", 
		null, null, null, null, "'<'", "'>'", null, null, null, null, null, "'('", 
		"')'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "TRUE", "FALSE", "NULL", "STRING", "INT", "FLOAT", "ID", "OPEN_BRACE", 
		"CLOSE_BRACE", "COMMENT", "LINE_COMMENT", "OP", "NATIVE", "SPACES", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "slp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 20 : OPEN_BRACE_action(_localctx, actionIndex); break;
		case 21 : CLOSE_BRACE_action(_localctx, actionIndex); break;
		case 27 : OPEN_PAREN_action(_localctx, actionIndex); break;
		case 28 : CLOSE_PAREN_action(_localctx, actionIndex); break;
		case 29 : OPEN_BRACK_action(_localctx, actionIndex); break;
		case 30 : CLOSE_BRACK_action(_localctx, actionIndex); break;
		case 31 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void OPEN_BRACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: opened++; break;
		}
	}
	private void CLOSE_BRACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: opened--; break;
		}
	}
	private void OPEN_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: opened++; break;
		}
	}
	private void CLOSE_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: opened--; break;
		}
	}
	private void OPEN_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: opened++; break;
		}
	}
	private void CLOSE_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 5: opened--; break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6: 
		     string newLine = Regex.Replace(Text, "[^\r\n]", "");
		     string spaces = Regex.Replace(Text, "[\r\n]", "");
		     int next = InputStream.La(1);
		     // if (opened > 0 || next == '\r' || next == '\n' ||next == '#') {
			 if (opened > 0 || next == '\r' || next == '\n') {
		       // If we're inside a list or on a blank line, ignore all indents, 
		       // dedents and line breaks.
		       Skip();
		     }
		     else {
		       int indent = getIndentationCount(spaces);

			   while(indents.Count > 0 && indents.Peek() >= indent) {
		           Emit(createDedent());
		           indents.Pop();
				}
				Emit(commonToken(slpParser.OPEN_PAREN, spaces));
				indents.Push(indent);
		     }
		    break;
		}
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2#\xF9\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b"+
		"\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\a\x12\x82\n\x12\f\x12\xE\x12\x85\v\x12\x3\x12\x3\x12\x3\x13"+
		"\x6\x13\x8A\n\x13\r\x13\xE\x13\x8B\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15"+
		"\x6\x15\x93\n\x15\r\x15\xE\x15\x94\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\xA1\n\x18\f\x18\xE\x18\xA4\v"+
		"\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\a\x19\xAC\n\x19\f\x19\xE"+
		"\x19\xAF\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\xB5\n\x19\f\x19\xE\x19"+
		"\xB8\v\x19\x3\x19\x5\x19\xBB\n\x19\x3\x19\x3\x19\x5\x19\xBF\n\x19\x3\x19"+
		"\x3\x19\x3\x1A\x6\x1A\xC4\n\x1A\r\x1A\xE\x1A\xC5\x3\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\xCB\n\x1B\f\x1B\xE\x1B\xCE\v\x1B\x3\x1B\x3\x1B\x3\x1C\x6\x1C\xD3"+
		"\n\x1C\r\x1C\xE\x1C\xD4\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x5!\xE6\n!\x3!\x3!\x6!\xEA"+
		"\n!\r!\xE!\xEB\x3!\x5!\xEF\n!\x3!\x3!\x3\"\x6\"\xF4\n\"\r\"\xE\"\xF5\x3"+
		"\"\x3\"\x3\xA2\x2#\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15"+
		"\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17"+
		"-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43"+
		"#\x3\x2\t\x3\x2$$\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2\f\f\xF\xF\n\x2#"+
		"#%(,-//<<>\x42~~\x80\x80\x4\x2}}\x7F\x7F\x4\x2\v\v\"\"\x5\x2\v\f\xE\xF"+
		"\"\"\x10A\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3"+
		"\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3"+
		"\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2"+
		"\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2"+
		"\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2"+
		")\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2"+
		"\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41"+
		"\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x3\x45\x3\x2\x2\x2\x5H\x3\x2\x2\x2\aK"+
		"\x3\x2\x2\x2\tN\x3\x2\x2\x2\vQ\x3\x2\x2\x2\rU\x3\x2\x2\x2\xFY\x3\x2\x2"+
		"\x2\x11]\x3\x2\x2\x2\x13\x61\x3\x2\x2\x2\x15\x66\x3\x2\x2\x2\x17j\x3\x2"+
		"\x2\x2\x19m\x3\x2\x2\x2\x1Bo\x3\x2\x2\x2\x1Dq\x3\x2\x2\x2\x1Fv\x3\x2\x2"+
		"\x2!|\x3\x2\x2\x2#\x7F\x3\x2\x2\x2%\x89\x3\x2\x2\x2\'\x8D\x3\x2\x2\x2"+
		")\x92\x3\x2\x2\x2+\x96\x3\x2\x2\x2-\x99\x3\x2\x2\x2/\x9C\x3\x2\x2\x2\x31"+
		"\xAD\x3\x2\x2\x2\x33\xC3\x3\x2\x2\x2\x35\xC7\x3\x2\x2\x2\x37\xD2\x3\x2"+
		"\x2\x2\x39\xD8\x3\x2\x2\x2;\xDB\x3\x2\x2\x2=\xDE\x3\x2\x2\x2?\xE1\x3\x2"+
		"\x2\x2\x41\xE9\x3\x2\x2\x2\x43\xF3\x3\x2\x2\x2\x45\x46\ah\x2\x2\x46G\a"+
		"z\x2\x2G\x4\x3\x2\x2\x2HI\ah\x2\x2IJ\a{\x2\x2J\x6\x3\x2\x2\x2KL\az\x2"+
		"\x2LM\ah\x2\x2M\b\x3\x2\x2\x2NO\a{\x2\x2OP\ah\x2\x2P\n\x3\x2\x2\x2QR\a"+
		"z\x2\x2RS\ah\x2\x2ST\az\x2\x2T\f\x3\x2\x2\x2UV\az\x2\x2VW\ah\x2\x2WX\a"+
		"{\x2\x2X\xE\x3\x2\x2\x2YZ\a{\x2\x2Z[\ah\x2\x2[\\\az\x2\x2\\\x10\x3\x2"+
		"\x2\x2]^\a{\x2\x2^_\ah\x2\x2_`\a{\x2\x2`\x12\x3\x2\x2\x2\x61\x62\a{\x2"+
		"\x2\x62\x63\ah\x2\x2\x63\x64\az\x2\x2\x64\x65\az\x2\x2\x65\x14\x3\x2\x2"+
		"\x2\x66g\ah\x2\x2gh\az\x2\x2hi\az\x2\x2i\x16\x3\x2\x2\x2jk\aq\x2\x2kl"+
		"\ar\x2\x2l\x18\x3\x2\x2\x2mn\a}\x2\x2n\x1A\x3\x2\x2\x2op\a\x7F\x2\x2p"+
		"\x1C\x3\x2\x2\x2qr\av\x2\x2rs\at\x2\x2st\aw\x2\x2tu\ag\x2\x2u\x1E\x3\x2"+
		"\x2\x2vw\ah\x2\x2wx\a\x63\x2\x2xy\an\x2\x2yz\au\x2\x2z{\ag\x2\x2{ \x3"+
		"\x2\x2\x2|}\a>\x2\x2}~\a@\x2\x2~\"\x3\x2\x2\x2\x7F\x83\a$\x2\x2\x80\x82"+
		"\n\x2\x2\x2\x81\x80\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81\x3\x2\x2\x2"+
		"\x83\x84\x3\x2\x2\x2\x84\x86\x3\x2\x2\x2\x85\x83\x3\x2\x2\x2\x86\x87\a"+
		"$\x2\x2\x87$\x3\x2\x2\x2\x88\x8A\x4\x32;\x2\x89\x88\x3\x2\x2\x2\x8A\x8B"+
		"\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8B\x8C\x3\x2\x2\x2\x8C&\x3\x2\x2\x2"+
		"\x8D\x8E\x5%\x13\x2\x8E\x8F\a\x30\x2\x2\x8F\x90\x5%\x13\x2\x90(\x3\x2"+
		"\x2\x2\x91\x93\t\x3\x2\x2\x92\x91\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94"+
		"\x92\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95*\x3\x2\x2\x2\x96\x97\a>\x2\x2"+
		"\x97\x98\b\x16\x2\x2\x98,\x3\x2\x2\x2\x99\x9A\a@\x2\x2\x9A\x9B\b\x17\x3"+
		"\x2\x9B.\x3\x2\x2\x2\x9C\x9D\a\x31\x2\x2\x9D\x9E\a,\x2\x2\x9E\xA2\x3\x2"+
		"\x2\x2\x9F\xA1\v\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2\x2\x2\xA2"+
		"\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4\xA2\x3\x2"+
		"\x2\x2\xA5\xA6\a,\x2\x2\xA6\xA7\a\x31\x2\x2\xA7\xA8\x3\x2\x2\x2\xA8\xA9"+
		"\b\x18\x4\x2\xA9\x30\x3\x2\x2\x2\xAA\xAC\x5\x43\"\x2\xAB\xAA\x3\x2\x2"+
		"\x2\xAC\xAF\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xB0"+
		"\x3\x2\x2\x2\xAF\xAD\x3\x2\x2\x2\xB0\xB1\a\x31\x2\x2\xB1\xB2\a\x31\x2"+
		"\x2\xB2\xB6\x3\x2\x2\x2\xB3\xB5\n\x4\x2\x2\xB4\xB3\x3\x2\x2\x2\xB5\xB8"+
		"\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xBE\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBB\a\xF\x2\x2\xBA\xB9\x3\x2\x2\x2\xBA\xBB"+
		"\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBF\a\f\x2\x2\xBD\xBF\a\xF\x2\x2"+
		"\xBE\xBA\x3\x2\x2\x2\xBE\xBD\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\x3"+
		"\x2\x2\x2\xC0\xC1\b\x19\x4\x2\xC1\x32\x3\x2\x2\x2\xC2\xC4\t\x5\x2\x2\xC3"+
		"\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC6\x3\x2"+
		"\x2\x2\xC6\x34\x3\x2\x2\x2\xC7\xCC\a}\x2\x2\xC8\xCB\x5\x35\x1B\x2\xC9"+
		"\xCB\n\x6\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCE\x3\x2"+
		"\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCF\x3\x2\x2\x2\xCE"+
		"\xCC\x3\x2\x2\x2\xCF\xD0\a\x7F\x2\x2\xD0\x36\x3\x2\x2\x2\xD1\xD3\t\a\x2"+
		"\x2\xD2\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD2\x3\x2\x2\x2\xD4\xD5"+
		"\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7\b\x1C\x4\x2\xD7\x38\x3\x2\x2"+
		"\x2\xD8\xD9\a*\x2\x2\xD9\xDA\b\x1D\x5\x2\xDA:\x3\x2\x2\x2\xDB\xDC\a+\x2"+
		"\x2\xDC\xDD\b\x1E\x6\x2\xDD<\x3\x2\x2\x2\xDE\xDF\a]\x2\x2\xDF\xE0\b\x1F"+
		"\a\x2\xE0>\x3\x2\x2\x2\xE1\xE2\a_\x2\x2\xE2\xE3\b \b\x2\xE3@\x3\x2\x2"+
		"\x2\xE4\xE6\a\xF\x2\x2\xE5\xE4\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE7"+
		"\x3\x2\x2\x2\xE7\xEA\a\f\x2\x2\xE8\xEA\a\xF\x2\x2\xE9\xE5\x3\x2\x2\x2"+
		"\xE9\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3"+
		"\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xEF\x5\x37\x1C\x2\xEE\xED\x3\x2\x2\x2"+
		"\xEE\xEF\x3\x2\x2\x2\xEF\xF0\x3\x2\x2\x2\xF0\xF1\b!\t\x2\xF1\x42\x3\x2"+
		"\x2\x2\xF2\xF4\t\b\x2\x2\xF3\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF3"+
		"\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\xF7\x3\x2\x2\x2\xF7\xF8\b\"\x4\x2"+
		"\xF8\x44\x3\x2\x2\x2\x14\x2\x83\x8B\x94\xA2\xAD\xB6\xBA\xBE\xC5\xCA\xCC"+
		"\xD4\xE5\xE9\xEB\xEE\xF5\n\x3\x16\x2\x3\x17\x3\x2\x3\x2\x3\x1D\x4\x3\x1E"+
		"\x5\x3\x1F\x6\x3 \a\x3!\b";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
