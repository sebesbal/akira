//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


	using System.Collections.Generic;
	using System.Text.RegularExpressions;

using System;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class slpLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, EXPORT=33, CLASS=34, TRUE=35, FAIL=36, NULL=37, STRING=38, INT=39, 
		FLOAT=40, ID=41, NATIVE=42, COMMENT=43, LINE_COMMENT=44, OPEN_PAREN=45, 
		CLOSE_PAREN=46, OPEN_BRACK=47, CLOSE_BRACK=48, NEWLINE=49, WS=50;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "EXPORT", 
		"CLASS", "TRUE", "FAIL", "NULL", "STRING", "INT", "FLOAT", "ID", "NATIVE", 
		"COMMENT", "LINE_COMMENT", "SPACES", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
		"CLOSE_BRACK", "NEWLINE", "WS"
	};


		// The amount of opened braces, brackets and parenthesis.
		private int opened = 0;
		private Stack<int> indents = new Stack<int>();
		private IToken lastToken = null;
		private List<IToken> tokens = new List<IToken>();
		
		static int getIndentationCount(String spaces) {
	    int count = 0;
	    foreach (char ch in spaces) {
	      switch (ch) {
	        case '\t':
	          count += 8 - (count % 8);
	          break;
	        default:
	          // A normal space char.
	          count++;
			  break;
	      }
	    }

	    return count;
	  }
	  
	  private CommonToken commonToken(int type, String text) {
	    int stop = this.CharIndex - 1;
	    int start = string.IsNullOrEmpty(text) ? stop : stop - text.Length + 1;
	    return new CommonToken(this._tokenFactorySourcePair, type + 1, DefaultTokenChannel, start, stop);
	  }
	  
	  private IToken createDedent() {
	    //CommonToken dedent = commonToken(slpParser.DEDENT, "");
		CommonToken dedent = commonToken(slpParser.CLOSE_PAREN, "");
	    dedent.Line = this.lastToken.Line;
	    return dedent;
	  }
	  
	  bool atStartOfInput() {
	    return Column == 0 && Line == 1;
	  }
	  
	  override public void Emit(IToken t) {
	    Token = t;
	    tokens.Add(t);
	  }
	  
	  override public IToken NextToken() {
	    // Check if the end-of-file is ahead and there are still some DEDENTS expected.
	    if (InputStream.La(1) == Eof && this.indents.Count > 0) {
	      // Remove any trailing EOF tokens from our buffer.
	      for (int i = tokens.Count - 1; i >= 0; i--) {
	        if (tokens[i].Type == Eof) {
	          tokens.RemoveAt(i);
	        }
	      }

	      // First emit an extra line break that serves as the end of the statement.
	      this.Emit(commonToken(slpParser.NEWLINE, "\n"));

	      // Now emit as much DEDENT tokens as needed.
	      while (indents.Count > 0) {
	        this.Emit(createDedent());
	        indents.Pop();
	      }

	      // Put the EOF back on the token stream.
	      this.Emit(commonToken(slpParser.Eof, "<EOF>"));
	    }

	    IToken next = base.NextToken();

	    if (next.Channel == DefaultTokenChannel) {
	      // Keep track of the last token on the default channel.
	      this.lastToken = next;
		}

		var first = tokens[0];
		tokens.RemoveAt(0);
	    return tokens.Count == 0 ? next : first;
	  }
	  


	public slpLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':-'", "'.'", "','", "'<'", "'>'", "'?'", "'!'", "'^'", 
		"'/'", "'*'", "'**'", "'*?'", "'*!'", "'*-'", "'-'", "'\\+-'", "'+-'", 
		"'+'", "'-+'", "'++'", "'=='", "'='", "':='", "'<='", "'>='", "'@'", "'::'", 
		"'?->'", "'-->'", "'->'", "'||'", "'export'", "'class'", "'true'", "'fail'", 
		"'<>'", null, null, null, null, null, null, null, "'('", "')'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "EXPORT", "CLASS", 
		"TRUE", "FAIL", "NULL", "STRING", "INT", "FLOAT", "ID", "NATIVE", "COMMENT", 
		"LINE_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "slp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 45 : OPEN_PAREN_action(_localctx, actionIndex); break;
		case 46 : CLOSE_PAREN_action(_localctx, actionIndex); break;
		case 47 : OPEN_BRACK_action(_localctx, actionIndex); break;
		case 48 : CLOSE_BRACK_action(_localctx, actionIndex); break;
		case 49 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void OPEN_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: opened++; break;
		}
	}
	private void CLOSE_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: opened--; break;
		}
	}
	private void OPEN_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: opened++; break;
		}
	}
	private void CLOSE_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: opened--; break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: 
		     string newLine = Regex.Replace(Text, "[^\r\n]", "");
		     string spaces = Regex.Replace(Text, "[\r\n]", "");
		     int next = InputStream.La(1);
		     if (opened > 0 || next == '\r' || next == '\n' || next == '#') {
		       // If we're inside a list or on a blank line, ignore all indents, 
		       // dedents and line breaks.
		       Skip();
		     }
		     else {
		       Emit(commonToken(NEWLINE, newLine));
		       int indent = getIndentationCount(spaces);
		       int previous = indents.Count == 0 ? 0 : indents.Peek();
		       if (indent == previous) {
		         // skip indents of the same size as the present indent-size
		         Skip();
		       }
		       else if (indent > previous) {
		         indents.Push(indent);
				 Emit(commonToken(slpParser.OPEN_PAREN, spaces));
		       }
		       else {
		         // Possibly emit more than 1 DEDENT token.
		         while(indents.Count > 0 && indents.Peek() > indent) {
		           Emit(createDedent());
		           indents.Pop();
		         }
		       }
		     }
		    break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 49 : return NEWLINE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool NEWLINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return atStartOfInput();
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x34\x13F\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3"+
		"\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3"+
		"\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12"+
		"\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3"+
		"!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3"+
		"$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3\'\x3\'\a\'\xDB\n"+
		"\'\f\'\xE\'\xDE\v\'\x3\'\x3\'\x3(\x6(\xE3\n(\r(\xE(\xE4\x3)\x3)\x3)\x3"+
		")\x3*\x6*\xEC\n*\r*\xE*\xED\x3+\x3+\x3+\a+\xF3\n+\f+\xE+\xF6\v+\x3+\x3"+
		"+\x3,\x3,\x3,\x3,\a,\xFE\n,\f,\xE,\x101\v,\x3,\x3,\x3,\x3,\x3,\x3-\x3"+
		"-\x3-\x3-\a-\x10C\n-\f-\xE-\x10F\v-\x3-\x5-\x112\n-\x3-\x3-\x3-\x3-\x3"+
		".\x6.\x119\n.\r.\xE.\x11A\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x31\x3\x31"+
		"\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x5\x33\x12C\n\x33\x3"+
		"\x33\x3\x33\x5\x33\x130\n\x33\x3\x33\x5\x33\x133\n\x33\x5\x33\x135\n\x33"+
		"\x3\x33\x3\x33\x3\x34\x6\x34\x13A\n\x34\r\x34\xE\x34\x13B\x3\x34\x3\x34"+
		"\x3\xFF\x2\x35\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17"+
		"\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+\x17-\x18/"+
		"\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\"\x43#\x45$"+
		"G%I&K\'M(O)Q*S+U,W-Y.[\x2]/_\x30\x61\x31\x63\x32\x65\x33g\x34\x3\x2\b"+
		"\x3\x2$$\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2}}\x7F\x7F\x4\x2\f\f\xF\xF"+
		"\x4\x2\v\v\"\"\x5\x2\v\f\xE\xF\"\"\x14B\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2"+
		"%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3"+
		"\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35"+
		"\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2"+
		"=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2"+
		"\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3"+
		"\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2"+
		"\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2]\x3\x2\x2\x2\x2_\x3\x2\x2\x2\x2"+
		"\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2g\x3\x2\x2\x2"+
		"\x3i\x3\x2\x2\x2\x5k\x3\x2\x2\x2\an\x3\x2\x2\x2\tp\x3\x2\x2\x2\vr\x3\x2"+
		"\x2\x2\rt\x3\x2\x2\x2\xFv\x3\x2\x2\x2\x11x\x3\x2\x2\x2\x13z\x3\x2\x2\x2"+
		"\x15|\x3\x2\x2\x2\x17~\x3\x2\x2\x2\x19\x80\x3\x2\x2\x2\x1B\x83\x3\x2\x2"+
		"\x2\x1D\x86\x3\x2\x2\x2\x1F\x89\x3\x2\x2\x2!\x8C\x3\x2\x2\x2#\x8E\x3\x2"+
		"\x2\x2%\x92\x3\x2\x2\x2\'\x95\x3\x2\x2\x2)\x97\x3\x2\x2\x2+\x9A\x3\x2"+
		"\x2\x2-\x9D\x3\x2\x2\x2/\xA0\x3\x2\x2\x2\x31\xA2\x3\x2\x2\x2\x33\xA5\x3"+
		"\x2\x2\x2\x35\xA8\x3\x2\x2\x2\x37\xAB\x3\x2\x2\x2\x39\xAD\x3\x2\x2\x2"+
		";\xB0\x3\x2\x2\x2=\xB4\x3\x2\x2\x2?\xB8\x3\x2\x2\x2\x41\xBB\x3\x2\x2\x2"+
		"\x43\xBE\x3\x2\x2\x2\x45\xC5\x3\x2\x2\x2G\xCB\x3\x2\x2\x2I\xD0\x3\x2\x2"+
		"\x2K\xD5\x3\x2\x2\x2M\xD8\x3\x2\x2\x2O\xE2\x3\x2\x2\x2Q\xE6\x3\x2\x2\x2"+
		"S\xEB\x3\x2\x2\x2U\xEF\x3\x2\x2\x2W\xF9\x3\x2\x2\x2Y\x107\x3\x2\x2\x2"+
		"[\x118\x3\x2\x2\x2]\x11C\x3\x2\x2\x2_\x11F\x3\x2\x2\x2\x61\x122\x3\x2"+
		"\x2\x2\x63\x125\x3\x2\x2\x2\x65\x134\x3\x2\x2\x2g\x139\x3\x2\x2\x2ij\a"+
		"=\x2\x2j\x4\x3\x2\x2\x2kl\a<\x2\x2lm\a/\x2\x2m\x6\x3\x2\x2\x2no\a\x30"+
		"\x2\x2o\b\x3\x2\x2\x2pq\a.\x2\x2q\n\x3\x2\x2\x2rs\a>\x2\x2s\f\x3\x2\x2"+
		"\x2tu\a@\x2\x2u\xE\x3\x2\x2\x2vw\a\x41\x2\x2w\x10\x3\x2\x2\x2xy\a#\x2"+
		"\x2y\x12\x3\x2\x2\x2z{\a`\x2\x2{\x14\x3\x2\x2\x2|}\a\x31\x2\x2}\x16\x3"+
		"\x2\x2\x2~\x7F\a,\x2\x2\x7F\x18\x3\x2\x2\x2\x80\x81\a,\x2\x2\x81\x82\a"+
		",\x2\x2\x82\x1A\x3\x2\x2\x2\x83\x84\a,\x2\x2\x84\x85\a\x41\x2\x2\x85\x1C"+
		"\x3\x2\x2\x2\x86\x87\a,\x2\x2\x87\x88\a#\x2\x2\x88\x1E\x3\x2\x2\x2\x89"+
		"\x8A\a,\x2\x2\x8A\x8B\a/\x2\x2\x8B \x3\x2\x2\x2\x8C\x8D\a/\x2\x2\x8D\""+
		"\x3\x2\x2\x2\x8E\x8F\a^\x2\x2\x8F\x90\a-\x2\x2\x90\x91\a/\x2\x2\x91$\x3"+
		"\x2\x2\x2\x92\x93\a-\x2\x2\x93\x94\a/\x2\x2\x94&\x3\x2\x2\x2\x95\x96\a"+
		"-\x2\x2\x96(\x3\x2\x2\x2\x97\x98\a/\x2\x2\x98\x99\a-\x2\x2\x99*\x3\x2"+
		"\x2\x2\x9A\x9B\a-\x2\x2\x9B\x9C\a-\x2\x2\x9C,\x3\x2\x2\x2\x9D\x9E\a?\x2"+
		"\x2\x9E\x9F\a?\x2\x2\x9F.\x3\x2\x2\x2\xA0\xA1\a?\x2\x2\xA1\x30\x3\x2\x2"+
		"\x2\xA2\xA3\a<\x2\x2\xA3\xA4\a?\x2\x2\xA4\x32\x3\x2\x2\x2\xA5\xA6\a>\x2"+
		"\x2\xA6\xA7\a?\x2\x2\xA7\x34\x3\x2\x2\x2\xA8\xA9\a@\x2\x2\xA9\xAA\a?\x2"+
		"\x2\xAA\x36\x3\x2\x2\x2\xAB\xAC\a\x42\x2\x2\xAC\x38\x3\x2\x2\x2\xAD\xAE"+
		"\a<\x2\x2\xAE\xAF\a<\x2\x2\xAF:\x3\x2\x2\x2\xB0\xB1\a\x41\x2\x2\xB1\xB2"+
		"\a/\x2\x2\xB2\xB3\a@\x2\x2\xB3<\x3\x2\x2\x2\xB4\xB5\a/\x2\x2\xB5\xB6\a"+
		"/\x2\x2\xB6\xB7\a@\x2\x2\xB7>\x3\x2\x2\x2\xB8\xB9\a/\x2\x2\xB9\xBA\a@"+
		"\x2\x2\xBA@\x3\x2\x2\x2\xBB\xBC\a~\x2\x2\xBC\xBD\a~\x2\x2\xBD\x42\x3\x2"+
		"\x2\x2\xBE\xBF\ag\x2\x2\xBF\xC0\az\x2\x2\xC0\xC1\ar\x2\x2\xC1\xC2\aq\x2"+
		"\x2\xC2\xC3\at\x2\x2\xC3\xC4\av\x2\x2\xC4\x44\x3\x2\x2\x2\xC5\xC6\a\x65"+
		"\x2\x2\xC6\xC7\an\x2\x2\xC7\xC8\a\x63\x2\x2\xC8\xC9\au\x2\x2\xC9\xCA\a"+
		"u\x2\x2\xCA\x46\x3\x2\x2\x2\xCB\xCC\av\x2\x2\xCC\xCD\at\x2\x2\xCD\xCE"+
		"\aw\x2\x2\xCE\xCF\ag\x2\x2\xCFH\x3\x2\x2\x2\xD0\xD1\ah\x2\x2\xD1\xD2\a"+
		"\x63\x2\x2\xD2\xD3\ak\x2\x2\xD3\xD4\an\x2\x2\xD4J\x3\x2\x2\x2\xD5\xD6"+
		"\a>\x2\x2\xD6\xD7\a@\x2\x2\xD7L\x3\x2\x2\x2\xD8\xDC\a$\x2\x2\xD9\xDB\n"+
		"\x2\x2\x2\xDA\xD9\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2"+
		"\xDC\xDD\x3\x2\x2\x2\xDD\xDF\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE0\a"+
		"$\x2\x2\xE0N\x3\x2\x2\x2\xE1\xE3\x4\x32;\x2\xE2\xE1\x3\x2\x2\x2\xE3\xE4"+
		"\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5P\x3\x2\x2\x2"+
		"\xE6\xE7\x5O(\x2\xE7\xE8\a\x30\x2\x2\xE8\xE9\x5O(\x2\xE9R\x3\x2\x2\x2"+
		"\xEA\xEC\t\x3\x2\x2\xEB\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\xEB\x3"+
		"\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEET\x3\x2\x2\x2\xEF\xF4\a}\x2\x2\xF0\xF3"+
		"\x5U+\x2\xF1\xF3\n\x4\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF1\x3\x2\x2\x2\xF3"+
		"\xF6\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF7\x3\x2"+
		"\x2\x2\xF6\xF4\x3\x2\x2\x2\xF7\xF8\a\x7F\x2\x2\xF8V\x3\x2\x2\x2\xF9\xFA"+
		"\a\x31\x2\x2\xFA\xFB\a,\x2\x2\xFB\xFF\x3\x2\x2\x2\xFC\xFE\v\x2\x2\x2\xFD"+
		"\xFC\x3\x2\x2\x2\xFE\x101\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\xFF\xFD\x3"+
		"\x2\x2\x2\x100\x102\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x102\x103\a,\x2\x2"+
		"\x103\x104\a\x31\x2\x2\x104\x105\x3\x2\x2\x2\x105\x106\b,\x2\x2\x106X"+
		"\x3\x2\x2\x2\x107\x108\a\x31\x2\x2\x108\x109\a\x31\x2\x2\x109\x10D\x3"+
		"\x2\x2\x2\x10A\x10C\n\x5\x2\x2\x10B\x10A\x3\x2\x2\x2\x10C\x10F\x3\x2\x2"+
		"\x2\x10D\x10B\x3\x2\x2\x2\x10D\x10E\x3\x2\x2\x2\x10E\x111\x3\x2\x2\x2"+
		"\x10F\x10D\x3\x2\x2\x2\x110\x112\a\xF\x2\x2\x111\x110\x3\x2\x2\x2\x111"+
		"\x112\x3\x2\x2\x2\x112\x113\x3\x2\x2\x2\x113\x114\a\f\x2\x2\x114\x115"+
		"\x3\x2\x2\x2\x115\x116\b-\x2\x2\x116Z\x3\x2\x2\x2\x117\x119\t\x6\x2\x2"+
		"\x118\x117\x3\x2\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x118\x3\x2\x2\x2\x11A"+
		"\x11B\x3\x2\x2\x2\x11B\\\x3\x2\x2\x2\x11C\x11D\a*\x2\x2\x11D\x11E\b/\x3"+
		"\x2\x11E^\x3\x2\x2\x2\x11F\x120\a+\x2\x2\x120\x121\b\x30\x4\x2\x121`\x3"+
		"\x2\x2\x2\x122\x123\a]\x2\x2\x123\x124\b\x31\x5\x2\x124\x62\x3\x2\x2\x2"+
		"\x125\x126\a_\x2\x2\x126\x127\b\x32\x6\x2\x127\x64\x3\x2\x2\x2\x128\x129"+
		"\x6\x33\x2\x2\x129\x135\x5[.\x2\x12A\x12C\a\xF\x2\x2\x12B\x12A\x3\x2\x2"+
		"\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x130\a\f\x2\x2\x12E"+
		"\x130\a\xF\x2\x2\x12F\x12B\x3\x2\x2\x2\x12F\x12E\x3\x2\x2\x2\x130\x132"+
		"\x3\x2\x2\x2\x131\x133\x5[.\x2\x132\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2"+
		"\x2\x133\x135\x3\x2\x2\x2\x134\x128\x3\x2\x2\x2\x134\x12F\x3\x2\x2\x2"+
		"\x135\x136\x3\x2\x2\x2\x136\x137\b\x33\a\x2\x137\x66\x3\x2\x2\x2\x138"+
		"\x13A\t\a\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x13B\x3\x2\x2\x2\x13B\x139"+
		"\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13D\x3\x2\x2\x2\x13D\x13E\b\x34"+
		"\x2\x2\x13Eh\x3\x2\x2\x2\x11\x2\xDC\xE4\xED\xF2\xF4\xFF\x10D\x111\x11A"+
		"\x12B\x12F\x132\x134\x13B\b\x2\x3\x2\x3/\x2\x3\x30\x3\x3\x31\x4\x3\x32"+
		"\x5\x3\x33\x6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
