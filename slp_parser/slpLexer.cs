//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591


	using System.Collections.Generic;

using System;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class slpLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, EXPORT=33, CLASS=34, TRUE=35, FAIL=36, NULL=37, STRING=38, INT=39, 
		FLOAT=40, ID=41, NATIVE=42, COMMENT=43, LINE_COMMENT=44, OPEN_PAREN=45, 
		CLOSE_PAREN=46, OPEN_BRACK=47, CLOSE_BRACK=48, OPEN_BRACE=49, CLOSE_BRACE=50, 
		NEWLINE=51, WS=52;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "EXPORT", 
		"CLASS", "TRUE", "FAIL", "NULL", "STRING", "INT", "FLOAT", "ID", "NATIVE", 
		"COMMENT", "LINE_COMMENT", "SPACES", "LINE_JOINING", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "NEWLINE", "WS"
	};


		// The amount of opened braces, brackets and parenthesis.
		private int opened = 0;
		private Stack<int> indents = new Stack<int>();
		
		static int getIndentationCount(String spaces) {
	    int count = 0;
	    foreach (char ch in spaces) {
	      switch (ch) {
	        case '\t':
	          count += 8 - (count % 8);
	          break;
	        default:
	          // A normal space char.
	          count++;
			  break;
	      }
	    }

	    return count;
	  }
	  
	  private CommonToken commonToken(int type, String text) {
	    int stop = this.CharIndex - 1;
	    int start = string.IsNullOrEmpty(text) ? stop : stop - text.Length + 1;
	    return new CommonToken(this._tokenFactorySourcePair, type, DefaultTokenChannel, start, stop);
	  }
	  
	  private IToken createDedent() {
	    CommonToken dedent = commonToken(slpParser.DEDENT, "");
	    dedent.Line = this.Token.Line;
	    return dedent;
	  }
	  
	  bool atStartOfInput() {
	    return Column == 0 && Line == 1;
	  }


	public slpLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':-'", "'.'", "','", "'<'", "'>'", "'?'", "'!'", "'^'", 
		"'/'", "'*'", "'**'", "'*?'", "'*!'", "'*-'", "'-'", "'\\+-'", "'+-'", 
		"'+'", "'-+'", "'++'", "'=='", "'='", "':='", "'<='", "'>='", "'@'", "'::'", 
		"'?->'", "'-->'", "'->'", "'||'", "'export'", "'class'", "'true'", "'fail'", 
		"'<>'", null, null, null, null, null, null, null, "'('", "')'", "'['", 
		"']'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "EXPORT", "CLASS", 
		"TRUE", "FAIL", "NULL", "STRING", "INT", "FLOAT", "ID", "NATIVE", "COMMENT", 
		"LINE_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"OPEN_BRACE", "CLOSE_BRACE", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "slp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 46 : OPEN_PAREN_action(_localctx, actionIndex); break;
		case 47 : CLOSE_PAREN_action(_localctx, actionIndex); break;
		case 48 : OPEN_BRACK_action(_localctx, actionIndex); break;
		case 49 : CLOSE_BRACK_action(_localctx, actionIndex); break;
		case 50 : OPEN_BRACE_action(_localctx, actionIndex); break;
		case 51 : CLOSE_BRACE_action(_localctx, actionIndex); break;
		case 52 : NEWLINE_action(_localctx, actionIndex); break;
		}
	}
	private void OPEN_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: opened++; break;
		}
	}
	private void CLOSE_PAREN_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: opened--; break;
		}
	}
	private void OPEN_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: opened++; break;
		}
	}
	private void CLOSE_BRACK_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 3: opened--; break;
		}
	}
	private void OPEN_BRACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 4: opened++; break;
		}
	}
	private void CLOSE_BRACE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 5: opened--; break;
		}
	}
	private void NEWLINE_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 6: 
		     String newLine = Text.Replace("\r\n", "");
		     String spaces = Text.Replace("\r\n", "");
		     int next = InputStream.La(1);
		     if (opened > 0 || next == '\r' || next == '\n' || next == '#') {
		       // If we're inside a list or on a blank line, ignore all indents, 
		       // dedents and line breaks.
		       Skip();
		     }
		     else {
		       Emit(commonToken(NEWLINE, newLine));
		       int indent = getIndentationCount(spaces);
		       int previous = indents.Count == 0 ? 0 : indents.Peek();
		       if (indent == previous) {
		         // skip indents of the same size as the present indent-size
		         Skip();
		       }
		       else if (indent > previous) {
		         indents.Push(indent);
		         Emit(commonToken(slpParser.INDENT, spaces));
		       }
		       else {
		         // Possibly emit more than 1 DEDENT token.
		         while(indents.Count > 0 && indents.Peek() > indent) {
		           this.Emit(createDedent());
		           indents.Pop();
		         }
		       }
		     }
		    break;
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 52 : return NEWLINE_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool NEWLINE_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return atStartOfInput();
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x36\x156\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A"+
		"\x4\x1B\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 "+
		"\t \x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t"+
		")\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31"+
		"\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37"+
		"\t\x37\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14"+
		"\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\""+
		"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3%\x3%\x3%\x3"+
		"%\x3%\x3&\x3&\x3&\x3\'\x3\'\a\'\xE1\n\'\f\'\xE\'\xE4\v\'\x3\'\x3\'\x3"+
		"(\x6(\xE9\n(\r(\xE(\xEA\x3)\x3)\x3)\x3)\x3*\x6*\xF2\n*\r*\xE*\xF3\x3+"+
		"\x3+\x3+\a+\xF9\n+\f+\xE+\xFC\v+\x3+\x3+\x3,\x3,\x3,\x3,\a,\x104\n,\f"+
		",\xE,\x107\v,\x3,\x3,\x3,\x3,\x3,\x3-\x3-\x3-\x3-\a-\x112\n-\f-\xE-\x115"+
		"\v-\x3-\x5-\x118\n-\x3-\x3-\x3-\x3-\x3.\x6.\x11F\n.\r.\xE.\x120\x3/\x3"+
		"/\x5/\x125\n/\x3/\x5/\x128\n/\x3/\x3/\x5/\x12C\n/\x3\x30\x3\x30\x3\x30"+
		"\x3\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x34"+
		"\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35\x3\x36\x3\x36\x3\x36\x5\x36\x143\n"+
		"\x36\x3\x36\x3\x36\x5\x36\x147\n\x36\x3\x36\x5\x36\x14A\n\x36\x5\x36\x14C"+
		"\n\x36\x3\x36\x3\x36\x3\x37\x6\x37\x151\n\x37\r\x37\xE\x37\x152\x3\x37"+
		"\x3\x37\x3\x105\x2\x38\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v"+
		"\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15)\x16+"+
		"\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E;\x1F= ?!\x41\""+
		"\x43#\x45$G%I&K\'M(O)Q*S+U,W-Y.[\x2]\x2_/\x61\x30\x63\x31\x65\x32g\x33"+
		"i\x34k\x35m\x36\x3\x2\b\x3\x2$$\x6\x2\x32;\x43\\\x61\x61\x63|\x4\x2}}"+
		"\x7F\x7F\x4\x2\f\f\xF\xF\x4\x2\v\v\"\"\x5\x2\v\f\xE\xF\"\"\x164\x2\x3"+
		"\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v"+
		"\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2"+
		"\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3\x2\x2"+
		"\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41\x3\x2\x2\x2"+
		"\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3\x2\x2\x2\x2I\x3\x2\x2\x2"+
		"\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3"+
		"\x2\x2\x2\x2U\x3\x2\x2\x2\x2W\x3\x2\x2\x2\x2Y\x3\x2\x2\x2\x2_\x3\x2\x2"+
		"\x2\x2\x61\x3\x2\x2\x2\x2\x63\x3\x2\x2\x2\x2\x65\x3\x2\x2\x2\x2g\x3\x2"+
		"\x2\x2\x2i\x3\x2\x2\x2\x2k\x3\x2\x2\x2\x2m\x3\x2\x2\x2\x3o\x3\x2\x2\x2"+
		"\x5q\x3\x2\x2\x2\at\x3\x2\x2\x2\tv\x3\x2\x2\x2\vx\x3\x2\x2\x2\rz\x3\x2"+
		"\x2\x2\xF|\x3\x2\x2\x2\x11~\x3\x2\x2\x2\x13\x80\x3\x2\x2\x2\x15\x82\x3"+
		"\x2\x2\x2\x17\x84\x3\x2\x2\x2\x19\x86\x3\x2\x2\x2\x1B\x89\x3\x2\x2\x2"+
		"\x1D\x8C\x3\x2\x2\x2\x1F\x8F\x3\x2\x2\x2!\x92\x3\x2\x2\x2#\x94\x3\x2\x2"+
		"\x2%\x98\x3\x2\x2\x2\'\x9B\x3\x2\x2\x2)\x9D\x3\x2\x2\x2+\xA0\x3\x2\x2"+
		"\x2-\xA3\x3\x2\x2\x2/\xA6\x3\x2\x2\x2\x31\xA8\x3\x2\x2\x2\x33\xAB\x3\x2"+
		"\x2\x2\x35\xAE\x3\x2\x2\x2\x37\xB1\x3\x2\x2\x2\x39\xB3\x3\x2\x2\x2;\xB6"+
		"\x3\x2\x2\x2=\xBA\x3\x2\x2\x2?\xBE\x3\x2\x2\x2\x41\xC1\x3\x2\x2\x2\x43"+
		"\xC4\x3\x2\x2\x2\x45\xCB\x3\x2\x2\x2G\xD1\x3\x2\x2\x2I\xD6\x3\x2\x2\x2"+
		"K\xDB\x3\x2\x2\x2M\xDE\x3\x2\x2\x2O\xE8\x3\x2\x2\x2Q\xEC\x3\x2\x2\x2S"+
		"\xF1\x3\x2\x2\x2U\xF5\x3\x2\x2\x2W\xFF\x3\x2\x2\x2Y\x10D\x3\x2\x2\x2["+
		"\x11E\x3\x2\x2\x2]\x122\x3\x2\x2\x2_\x12D\x3\x2\x2\x2\x61\x130\x3\x2\x2"+
		"\x2\x63\x133\x3\x2\x2\x2\x65\x136\x3\x2\x2\x2g\x139\x3\x2\x2\x2i\x13C"+
		"\x3\x2\x2\x2k\x14B\x3\x2\x2\x2m\x150\x3\x2\x2\x2op\a=\x2\x2p\x4\x3\x2"+
		"\x2\x2qr\a<\x2\x2rs\a/\x2\x2s\x6\x3\x2\x2\x2tu\a\x30\x2\x2u\b\x3\x2\x2"+
		"\x2vw\a.\x2\x2w\n\x3\x2\x2\x2xy\a>\x2\x2y\f\x3\x2\x2\x2z{\a@\x2\x2{\xE"+
		"\x3\x2\x2\x2|}\a\x41\x2\x2}\x10\x3\x2\x2\x2~\x7F\a#\x2\x2\x7F\x12\x3\x2"+
		"\x2\x2\x80\x81\a`\x2\x2\x81\x14\x3\x2\x2\x2\x82\x83\a\x31\x2\x2\x83\x16"+
		"\x3\x2\x2\x2\x84\x85\a,\x2\x2\x85\x18\x3\x2\x2\x2\x86\x87\a,\x2\x2\x87"+
		"\x88\a,\x2\x2\x88\x1A\x3\x2\x2\x2\x89\x8A\a,\x2\x2\x8A\x8B\a\x41\x2\x2"+
		"\x8B\x1C\x3\x2\x2\x2\x8C\x8D\a,\x2\x2\x8D\x8E\a#\x2\x2\x8E\x1E\x3\x2\x2"+
		"\x2\x8F\x90\a,\x2\x2\x90\x91\a/\x2\x2\x91 \x3\x2\x2\x2\x92\x93\a/\x2\x2"+
		"\x93\"\x3\x2\x2\x2\x94\x95\a^\x2\x2\x95\x96\a-\x2\x2\x96\x97\a/\x2\x2"+
		"\x97$\x3\x2\x2\x2\x98\x99\a-\x2\x2\x99\x9A\a/\x2\x2\x9A&\x3\x2\x2\x2\x9B"+
		"\x9C\a-\x2\x2\x9C(\x3\x2\x2\x2\x9D\x9E\a/\x2\x2\x9E\x9F\a-\x2\x2\x9F*"+
		"\x3\x2\x2\x2\xA0\xA1\a-\x2\x2\xA1\xA2\a-\x2\x2\xA2,\x3\x2\x2\x2\xA3\xA4"+
		"\a?\x2\x2\xA4\xA5\a?\x2\x2\xA5.\x3\x2\x2\x2\xA6\xA7\a?\x2\x2\xA7\x30\x3"+
		"\x2\x2\x2\xA8\xA9\a<\x2\x2\xA9\xAA\a?\x2\x2\xAA\x32\x3\x2\x2\x2\xAB\xAC"+
		"\a>\x2\x2\xAC\xAD\a?\x2\x2\xAD\x34\x3\x2\x2\x2\xAE\xAF\a@\x2\x2\xAF\xB0"+
		"\a?\x2\x2\xB0\x36\x3\x2\x2\x2\xB1\xB2\a\x42\x2\x2\xB2\x38\x3\x2\x2\x2"+
		"\xB3\xB4\a<\x2\x2\xB4\xB5\a<\x2\x2\xB5:\x3\x2\x2\x2\xB6\xB7\a\x41\x2\x2"+
		"\xB7\xB8\a/\x2\x2\xB8\xB9\a@\x2\x2\xB9<\x3\x2\x2\x2\xBA\xBB\a/\x2\x2\xBB"+
		"\xBC\a/\x2\x2\xBC\xBD\a@\x2\x2\xBD>\x3\x2\x2\x2\xBE\xBF\a/\x2\x2\xBF\xC0"+
		"\a@\x2\x2\xC0@\x3\x2\x2\x2\xC1\xC2\a~\x2\x2\xC2\xC3\a~\x2\x2\xC3\x42\x3"+
		"\x2\x2\x2\xC4\xC5\ag\x2\x2\xC5\xC6\az\x2\x2\xC6\xC7\ar\x2\x2\xC7\xC8\a"+
		"q\x2\x2\xC8\xC9\at\x2\x2\xC9\xCA\av\x2\x2\xCA\x44\x3\x2\x2\x2\xCB\xCC"+
		"\a\x65\x2\x2\xCC\xCD\an\x2\x2\xCD\xCE\a\x63\x2\x2\xCE\xCF\au\x2\x2\xCF"+
		"\xD0\au\x2\x2\xD0\x46\x3\x2\x2\x2\xD1\xD2\av\x2\x2\xD2\xD3\at\x2\x2\xD3"+
		"\xD4\aw\x2\x2\xD4\xD5\ag\x2\x2\xD5H\x3\x2\x2\x2\xD6\xD7\ah\x2\x2\xD7\xD8"+
		"\a\x63\x2\x2\xD8\xD9\ak\x2\x2\xD9\xDA\an\x2\x2\xDAJ\x3\x2\x2\x2\xDB\xDC"+
		"\a>\x2\x2\xDC\xDD\a@\x2\x2\xDDL\x3\x2\x2\x2\xDE\xE2\a$\x2\x2\xDF\xE1\n"+
		"\x2\x2\x2\xE0\xDF\x3\x2\x2\x2\xE1\xE4\x3\x2\x2\x2\xE2\xE0\x3\x2\x2\x2"+
		"\xE2\xE3\x3\x2\x2\x2\xE3\xE5\x3\x2\x2\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE6\a"+
		"$\x2\x2\xE6N\x3\x2\x2\x2\xE7\xE9\x4\x32;\x2\xE8\xE7\x3\x2\x2\x2\xE9\xEA"+
		"\x3\x2\x2\x2\xEA\xE8\x3\x2\x2\x2\xEA\xEB\x3\x2\x2\x2\xEBP\x3\x2\x2\x2"+
		"\xEC\xED\x5O(\x2\xED\xEE\a\x30\x2\x2\xEE\xEF\x5O(\x2\xEFR\x3\x2\x2\x2"+
		"\xF0\xF2\t\x3\x2\x2\xF1\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF1\x3"+
		"\x2\x2\x2\xF3\xF4\x3\x2\x2\x2\xF4T\x3\x2\x2\x2\xF5\xFA\a}\x2\x2\xF6\xF9"+
		"\x5U+\x2\xF7\xF9\n\x4\x2\x2\xF8\xF6\x3\x2\x2\x2\xF8\xF7\x3\x2\x2\x2\xF9"+
		"\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2\x2\xFB\xFD\x3\x2"+
		"\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xFE\a\x7F\x2\x2\xFEV\x3\x2\x2\x2\xFF\x100"+
		"\a\x31\x2\x2\x100\x101\a,\x2\x2\x101\x105\x3\x2\x2\x2\x102\x104\v\x2\x2"+
		"\x2\x103\x102\x3\x2\x2\x2\x104\x107\x3\x2\x2\x2\x105\x106\x3\x2\x2\x2"+
		"\x105\x103\x3\x2\x2\x2\x106\x108\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x108"+
		"\x109\a,\x2\x2\x109\x10A\a\x31\x2\x2\x10A\x10B\x3\x2\x2\x2\x10B\x10C\b"+
		",\x2\x2\x10CX\x3\x2\x2\x2\x10D\x10E\a\x31\x2\x2\x10E\x10F\a\x31\x2\x2"+
		"\x10F\x113\x3\x2\x2\x2\x110\x112\n\x5\x2\x2\x111\x110\x3\x2\x2\x2\x112"+
		"\x115\x3\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x117"+
		"\x3\x2\x2\x2\x115\x113\x3\x2\x2\x2\x116\x118\a\xF\x2\x2\x117\x116\x3\x2"+
		"\x2\x2\x117\x118\x3\x2\x2\x2\x118\x119\x3\x2\x2\x2\x119\x11A\a\f\x2\x2"+
		"\x11A\x11B\x3\x2\x2\x2\x11B\x11C\b-\x2\x2\x11CZ\x3\x2\x2\x2\x11D\x11F"+
		"\t\x6\x2\x2\x11E\x11D\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x11E\x3\x2"+
		"\x2\x2\x120\x121\x3\x2\x2\x2\x121\\\x3\x2\x2\x2\x122\x124\a^\x2\x2\x123"+
		"\x125\x5[.\x2\x124\x123\x3\x2\x2\x2\x124\x125\x3\x2\x2\x2\x125\x12B\x3"+
		"\x2\x2\x2\x126\x128\a\xF\x2\x2\x127\x126\x3\x2\x2\x2\x127\x128\x3\x2\x2"+
		"\x2\x128\x129\x3\x2\x2\x2\x129\x12C\a\f\x2\x2\x12A\x12C\a\xF\x2\x2\x12B"+
		"\x127\x3\x2\x2\x2\x12B\x12A\x3\x2\x2\x2\x12C^\x3\x2\x2\x2\x12D\x12E\a"+
		"*\x2\x2\x12E\x12F\b\x30\x3\x2\x12F`\x3\x2\x2\x2\x130\x131\a+\x2\x2\x131"+
		"\x132\b\x31\x4\x2\x132\x62\x3\x2\x2\x2\x133\x134\a]\x2\x2\x134\x135\b"+
		"\x32\x5\x2\x135\x64\x3\x2\x2\x2\x136\x137\a_\x2\x2\x137\x138\b\x33\x6"+
		"\x2\x138\x66\x3\x2\x2\x2\x139\x13A\a}\x2\x2\x13A\x13B\b\x34\a\x2\x13B"+
		"h\x3\x2\x2\x2\x13C\x13D\a\x7F\x2\x2\x13D\x13E\b\x35\b\x2\x13Ej\x3\x2\x2"+
		"\x2\x13F\x140\x6\x36\x2\x2\x140\x14C\x5[.\x2\x141\x143\a\xF\x2\x2\x142"+
		"\x141\x3\x2\x2\x2\x142\x143\x3\x2\x2\x2\x143\x144\x3\x2\x2\x2\x144\x147"+
		"\a\f\x2\x2\x145\x147\a\xF\x2\x2\x146\x142\x3\x2\x2\x2\x146\x145\x3\x2"+
		"\x2\x2\x147\x149\x3\x2\x2\x2\x148\x14A\x5[.\x2\x149\x148\x3\x2\x2\x2\x149"+
		"\x14A\x3\x2\x2\x2\x14A\x14C\x3\x2\x2\x2\x14B\x13F\x3\x2\x2\x2\x14B\x146"+
		"\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D\x14E\b\x36\t\x2\x14El\x3\x2\x2"+
		"\x2\x14F\x151\t\a\x2\x2\x150\x14F\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152"+
		"\x150\x3\x2\x2\x2\x152\x153\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155"+
		"\b\x37\x2\x2\x155n\x3\x2\x2\x2\x14\x2\xE2\xEA\xF3\xF8\xFA\x105\x113\x117"+
		"\x120\x124\x127\x12B\x142\x146\x149\x14B\x152\n\x2\x3\x2\x3\x30\x2\x3"+
		"\x31\x3\x3\x32\x4\x3\x33\x5\x3\x34\x6\x3\x35\a\x3\x36\b";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
