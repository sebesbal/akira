//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class slpParser : Parser {
	public const int
		T__0=1, T__1=2, EXPORT=3, CLASS=4, TRUE=5, FALSE=6, NULL=7, STRING=8, 
		INT=9, FLOAT=10, ID=11, OP=12, NATIVE=13, COMMENT=14, LINE_COMMENT=15, 
		SPACES=16, OPEN_PAREN=17, CLOSE_PAREN=18, OPEN_BRACK=19, CLOSE_BRACK=20, 
		OPEN_BRACE=21, CLOSE_BRACE=22, NEWLINE=23, WS=24, INDENT=25, DEDENT=26;
	public const int
		RULE_program = 0, RULE_list = 1, RULE_token = 2;
	public static readonly string[] ruleNames = {
		"program", "list", "token"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'export'", "'class'", "'true'", "'false'", "'<>'", 
		null, null, null, null, null, null, null, null, null, "'('", "')'", "'['", 
		"']'", "'<'", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "EXPORT", "CLASS", "TRUE", "FALSE", "NULL", "STRING", 
		"INT", "FLOAT", "ID", "OP", "NATIVE", "COMMENT", "LINE_COMMENT", "SPACES", 
		"OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", 
		"CLOSE_BRACE", "NEWLINE", "WS", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "slp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public slpParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ListContext[] list() {
			return GetRuleContexts<ListContext>();
		}
		public ListContext list(int i) {
			return GetRuleContext<ListContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 6; list();
				}
				}
				State = 9;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << TRUE) | (1L << FALSE) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << OP) | (1L << OPEN_PAREN) | (1L << OPEN_BRACK) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public TokenContext[] token() {
			return GetRuleContexts<TokenContext>();
		}
		public TokenContext token(int i) {
			return GetRuleContext<TokenContext>(i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 2, RULE_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 12;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 11; token();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 14;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(slpParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(slpParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(slpParser.STRING, 0); }
		public ITerminalNode TRUE() { return GetToken(slpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(slpParser.FALSE, 0); }
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public ITerminalNode OP() { return GetToken(slpParser.OP, 0); }
		public ITerminalNode NEWLINE() { return GetToken(slpParser.NEWLINE, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterToken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitToken(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 4, RULE_token);
		try {
			State = 36;
			switch (TokenStream.La(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 16; Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 17; Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 18; Match(STRING);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 19; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 20; Match(FALSE);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 6);
				{
				State = 21; Match(ID);
				}
				break;
			case OP:
				EnterOuterAlt(_localctx, 7);
				{
				State = 22; Match(OP);
				}
				break;
			case NEWLINE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 23; Match(NEWLINE);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 9);
				{
				State = 24; Match(OPEN_PAREN);
				State = 25; list();
				State = 26; Match(CLOSE_PAREN);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 10);
				{
				State = 28; Match(T__0);
				State = 29; list();
				State = 30; Match(T__1);
				}
				break;
			case OPEN_BRACK:
				EnterOuterAlt(_localctx, 11);
				{
				State = 32; Match(OPEN_BRACK);
				State = 33; list();
				State = 34; Match(CLOSE_BRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1C)\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x6\x3\xF"+
		"\n\x3\r\x3\xE\x3\x10\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4\'\n\x4\x3\x4\x2\x2\x5\x2\x4\x6\x2\x2\x31\x2\t\x3\x2\x2\x2\x4\xE"+
		"\x3\x2\x2\x2\x6&\x3\x2\x2\x2\b\n\x5\x4\x3\x2\t\b\x3\x2\x2\x2\n\v\x3\x2"+
		"\x2\x2\v\t\x3\x2\x2\x2\v\f\x3\x2\x2\x2\f\x3\x3\x2\x2\x2\r\xF\x5\x6\x4"+
		"\x2\xE\r\x3\x2\x2\x2\xF\x10\x3\x2\x2\x2\x10\xE\x3\x2\x2\x2\x10\x11\x3"+
		"\x2\x2\x2\x11\x5\x3\x2\x2\x2\x12\'\a\v\x2\x2\x13\'\a\f\x2\x2\x14\'\a\n"+
		"\x2\x2\x15\'\a\a\x2\x2\x16\'\a\b\x2\x2\x17\'\a\r\x2\x2\x18\'\a\xE\x2\x2"+
		"\x19\'\a\x19\x2\x2\x1A\x1B\a\x13\x2\x2\x1B\x1C\x5\x4\x3\x2\x1C\x1D\a\x14"+
		"\x2\x2\x1D\'\x3\x2\x2\x2\x1E\x1F\a\x3\x2\x2\x1F \x5\x4\x3\x2 !\a\x4\x2"+
		"\x2!\'\x3\x2\x2\x2\"#\a\x15\x2\x2#$\x5\x4\x3\x2$%\a\x16\x2\x2%\'\x3\x2"+
		"\x2\x2&\x12\x3\x2\x2\x2&\x13\x3\x2\x2\x2&\x14\x3\x2\x2\x2&\x15\x3\x2\x2"+
		"\x2&\x16\x3\x2\x2\x2&\x17\x3\x2\x2\x2&\x18\x3\x2\x2\x2&\x19\x3\x2\x2\x2"+
		"&\x1A\x3\x2\x2\x2&\x1E\x3\x2\x2\x2&\"\x3\x2\x2\x2\'\a\x3\x2\x2\x2\x5\v"+
		"\x10&";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
