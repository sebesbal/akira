//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class slpParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, EXPORT=33, CLASS=34, TRUE=35, FAIL=36, NULL=37, STRING=38, INT=39, 
		FLOAT=40, ID=41, NATIVE=42, COMMENT=43, LINE_COMMENT=44, OPEN_PAREN=45, 
		CLOSE_PAREN=46, OPEN_BRACK=47, CLOSE_BRACK=48, NEWLINE=49, WS=50, INDENT=51, 
		DEDENT=52;
	public const int
		RULE_program = 0, RULE_predicate = 1, RULE_decList = 2, RULE_declaration = 3, 
		RULE_exp = 4, RULE_id = 5, RULE_nat = 6, RULE_call = 7, RULE_expList = 8, 
		RULE_rul = 9;
	public static readonly string[] ruleNames = {
		"program", "predicate", "decList", "declaration", "exp", "id", "nat", 
		"call", "expList", "rul"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':-'", "'.'", "','", "'<'", "'>'", "'?'", "'!'", "'^'", 
		"'/'", "'*'", "'**'", "'*?'", "'*!'", "'*-'", "'-'", "'\\+-'", "'+-'", 
		"'+'", "'-+'", "'++'", "'=='", "'='", "':='", "'<='", "'>='", "'@'", "'::'", 
		"'?->'", "'-->'", "'->'", "'||'", "'export'", "'class'", "'true'", "'fail'", 
		"'<>'", null, null, null, null, null, null, null, "'('", "')'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "EXPORT", "CLASS", 
		"TRUE", "FAIL", "NULL", "STRING", "INT", "FLOAT", "ID", "NATIVE", "COMMENT", 
		"LINE_COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", 
		"NEWLINE", "WS", "INDENT", "DEDENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "slp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public slpParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(slpParser.NEWLINE, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_la = TokenStream.La(1);
			if (_la==NEWLINE) {
				{
				State = 20; Match(NEWLINE);
				}
			}

			State = 23; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public DecListContext inParams;
		public DecListContext outParams;
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode EXPORT() { return GetToken(slpParser.EXPORT, 0); }
		public DecListContext[] decList() {
			return GetRuleContexts<DecListContext>();
		}
		public DecListContext decList(int i) {
			return GetRuleContext<DecListContext>(i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 2, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_la = TokenStream.La(1);
			if (_la==EXPORT) {
				{
				State = 25; Match(EXPORT);
				}
			}

			State = 28; Match(ID);
			State = 29; Match(OPEN_PAREN);
			State = 31;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 30; _localctx.inParams = decList();
				}
				break;
			}
			State = 35;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 33; Match(T__0);
				State = 34; _localctx.outParams = decList();
				}
			}

			State = 37; Match(CLOSE_PAREN);
			State = 38; Match(T__1);
			State = 39; exp(0);
			State = 40; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecListContext : ParserRuleContext {
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public DecListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterDecList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitDecList(this);
		}
	}

	[RuleVersion(0)]
	public DecListContext decList() {
		DecListContext _localctx = new DecListContext(Context, State);
		EnterRule(_localctx, 4, RULE_decList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; declaration();
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__3) {
				{
				{
				State = 43; Match(T__3);
				State = 44; declaration();
				}
				}
				State = 49;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SwitchContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public SwitchContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
	}
	public partial class SugarContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public SugarContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterSugar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitSugar(this);
		}
	}
	public partial class AssociativeContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AssociativeContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterAssociative(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitAssociative(this);
		}
	}
	public partial class MemberContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public MemberContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
	}
	public partial class BinaryContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public BinaryContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
	}
	public partial class OpVarContext : ExpContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OpVarContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterOpVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitOpVar(this);
		}
	}
	public partial class OperatorContext : ExpContext {
		public OperatorContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
	}
	public partial class OpVarUnaryContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public OpVarUnaryContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterOpVarUnary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitOpVarUnary(this);
		}
	}
	public partial class ParaContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ParaContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterPara(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitPara(this);
		}
	}
	public partial class NotContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public NotContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
	}
	public partial class SingContext : ExpContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public NatContext nat() {
			return GetRuleContext<NatContext>(0);
		}
		public ITerminalNode INT() { return GetToken(slpParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(slpParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(slpParser.STRING, 0); }
		public ITerminalNode TRUE() { return GetToken(slpParser.TRUE, 0); }
		public ITerminalNode FAIL() { return GetToken(slpParser.FAIL, 0); }
		public ITerminalNode NULL() { return GetToken(slpParser.NULL, 0); }
		public SingContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterSing(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitSing(this);
		}
	}
	public partial class QuestionContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public QuestionContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterQuestion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitQuestion(this);
		}
	}
	public partial class AttributeContext : ExpContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NatContext nat() {
			return GetRuleContext<NatContext>(0);
		}
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public AttributeContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}
	public partial class MinContext : ExpContext {
		public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public MinContext(ExpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterMin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitMin(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_exp, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 53; Match(T__7);
				State = 54; exp(38);
				}
				break;
			case 2:
				{
				_localctx = new MinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 55; Match(T__15);
				State = 56; exp(30);
				}
				break;
			case 3:
				{
				_localctx = new MinContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57; Match(T__16);
				State = 58; exp(29);
				}
				break;
			case 4:
				{
				_localctx = new OpVarUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59; Match(T__17);
				State = 60; exp(28);
				}
				break;
			case 5:
				{
				_localctx = new SugarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61; Match(T__28);
				State = 62; exp(11);
				}
				break;
			case 6:
				{
				_localctx = new SugarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 63; Match(T__29);
				State = 64; exp(10);
				}
				break;
			case 7:
				{
				_localctx = new SugarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; Match(T__30);
				State = 66; exp(9);
				}
				break;
			case 8:
				{
				_localctx = new ParaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; Match(T__0);
				State = 68; exp(2);
				}
				break;
			case 9:
				{
				_localctx = new AttributeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 69; Match(T__4);
					State = 70; call();
					State = 71; Match(T__5);
					}
					}
					State = 75;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==T__4 );
				State = 79;
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 77; id();
					}
					break;
				case 2:
					{
					State = 78; nat();
					}
					break;
				}
				}
				break;
			case 10:
				{
				_localctx = new SingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 85;
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 81; id();
					}
					break;
				case 2:
					{
					State = 82; call();
					}
					break;
				case 3:
					{
					State = 83; nat();
					}
					break;
				case 4:
					{
					State = 84;
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 11:
				{
				_localctx = new ParaContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 87; Match(OPEN_PAREN);
				State = 88; exp(0);
				State = 89; Match(CLOSE_PAREN);
				}
				break;
			case 12:
				{
				_localctx = new OperatorContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 103;
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 91; Match(OPEN_PAREN);
					State = 92; Match(T__18);
					State = 93; Match(CLOSE_PAREN);
					}
					break;
				case 2:
					{
					State = 94; Match(OPEN_PAREN);
					State = 95; Match(T__15);
					State = 96; Match(CLOSE_PAREN);
					}
					break;
				case 3:
					{
					State = 97; Match(OPEN_PAREN);
					State = 98; Match(T__10);
					State = 99; Match(CLOSE_PAREN);
					}
					break;
				case 4:
					{
					State = 100; Match(OPEN_PAREN);
					State = 101; Match(T__9);
					State = 102; Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 200;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 198;
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 107;
						if (!(Precpred(Context, 37))) throw new FailedPredicateException(this, "Precpred(Context, 37)");
						State = 108; Match(T__8);
						State = 109; exp(38);
						}
						break;
					case 2:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 110;
						if (!(Precpred(Context, 36))) throw new FailedPredicateException(this, "Precpred(Context, 36)");
						State = 111; Match(T__9);
						State = 112; exp(37);
						}
						break;
					case 3:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 113;
						if (!(Precpred(Context, 35))) throw new FailedPredicateException(this, "Precpred(Context, 35)");
						State = 114; Match(T__10);
						State = 115; exp(36);
						}
						break;
					case 4:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 116;
						if (!(Precpred(Context, 34))) throw new FailedPredicateException(this, "Precpred(Context, 34)");
						State = 117; Match(T__11);
						State = 118; exp(35);
						}
						break;
					case 5:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 119;
						if (!(Precpred(Context, 33))) throw new FailedPredicateException(this, "Precpred(Context, 33)");
						State = 120; Match(T__12);
						State = 121; exp(34);
						}
						break;
					case 6:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 122;
						if (!(Precpred(Context, 32))) throw new FailedPredicateException(this, "Precpred(Context, 32)");
						State = 123; Match(T__13);
						State = 124; exp(33);
						}
						break;
					case 7:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 125;
						if (!(Precpred(Context, 31))) throw new FailedPredicateException(this, "Precpred(Context, 31)");
						State = 126; Match(T__14);
						State = 127; exp(32);
						}
						break;
					case 8:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 128;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 129; Match(T__15);
						State = 130; exp(28);
						}
						break;
					case 9:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 131;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 132; Match(T__18);
						State = 133; exp(27);
						}
						break;
					case 10:
						{
						_localctx = new OpVarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 134;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 135; Match(T__17);
						State = 136; exp(26);
						}
						break;
					case 11:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 137;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 138; Match(T__16);
						State = 139; exp(25);
						}
						break;
					case 12:
						{
						_localctx = new OpVarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 140;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 141; Match(T__19);
						State = 142; exp(24);
						}
						break;
					case 13:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 143;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 144; Match(T__20);
						State = 145; exp(23);
						}
						break;
					case 14:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 146;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 147; Match(T__21);
						State = 148; exp(22);
						}
						break;
					case 15:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 149;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 150; Match(T__22);
						State = 151; exp(21);
						}
						break;
					case 16:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 152;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 153; Match(T__23);
						State = 154; exp(20);
						}
						break;
					case 17:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 155;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 156; Match(T__4);
						State = 157; exp(19);
						}
						break;
					case 18:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 158;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 159; Match(T__5);
						State = 160; exp(18);
						}
						break;
					case 19:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 161;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 162; Match(T__24);
						State = 163; exp(17);
						}
						break;
					case 20:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 164;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 165; Match(T__25);
						State = 166; exp(16);
						}
						break;
					case 21:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 167;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 168; Match(T__3);
						State = 169; exp(14);
						}
						break;
					case 22:
						{
						_localctx = new BinaryContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 170;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 171; Match(T__27);
						State = 172; exp(13);
						}
						break;
					case 23:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 173;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 174; Match(T__28);
						State = 175; exp(9);
						}
						break;
					case 24:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 176;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 177; Match(T__29);
						State = 178; exp(8);
						}
						break;
					case 25:
						{
						_localctx = new SugarContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 179;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 180; Match(T__30);
						State = 181; exp(7);
						}
						break;
					case 26:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 182;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 183; Match(T__0);
						State = 184; exp(6);
						}
						break;
					case 27:
						{
						_localctx = new AssociativeContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 185;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 186; Match(T__31);
						State = 187; exp(5);
						}
						break;
					case 28:
						{
						_localctx = new MemberContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 188;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 189; Match(T__2);
						State = 190; Match(ID);
						}
						break;
					case 29:
						{
						_localctx = new QuestionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 191;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 192; Match(T__6);
						}
						break;
					case 30:
						{
						_localctx = new SwitchContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 193;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 194; Match(T__26);
						State = 195; id();
						}
						break;
					case 31:
						{
						_localctx = new ParaContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 196;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 197; Match(T__3);
						}
						break;
					}
					} 
				}
				State = 202;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 10, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatContext : ParserRuleContext {
		public ITerminalNode NATIVE() { return GetToken(slpParser.NATIVE, 0); }
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public NatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterNat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitNat(this);
		}
	}

	[RuleVersion(0)]
	public NatContext nat() {
		NatContext _localctx = new NatContext(Context, State);
		EnterRule(_localctx, 12, RULE_nat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			_la = TokenStream.La(1);
			if (_la==ID) {
				{
				State = 205; Match(ID);
				}
			}

			State = 208; Match(NATIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
	 
		public CallContext() { }
		public virtual void CopyFrom(CallContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DelayedCall1Context : CallContext {
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public DelayedCall1Context(CallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterDelayedCall1(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitDelayedCall1(this);
		}
	}
	public partial class DelayedCall2Context : CallContext {
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public DelayedCall2Context(CallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterDelayedCall2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitDelayedCall2(this);
		}
	}
	public partial class DeclareCallContext : CallContext {
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public DeclareCallContext(CallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterDeclareCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitDeclareCall(this);
		}
	}
	public partial class NormalCallContext : CallContext {
		public ITerminalNode ID() { return GetToken(slpParser.ID, 0); }
		public CallContext[] call() {
			return GetRuleContexts<CallContext>();
		}
		public CallContext call(int i) {
			return GetRuleContext<CallContext>(i);
		}
		public ExpListContext expList() {
			return GetRuleContext<ExpListContext>(0);
		}
		public NormalCallContext(CallContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterNormalCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitNormalCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 14, RULE_call);
		int _la;
		try {
			State = 291;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				_localctx = new NormalCallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 210; Match(T__4);
					State = 211; call();
					State = 212; Match(T__5);
					}
					}
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 219; Match(ID);
				State = 225;
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 220; Match(OPEN_PAREN);
					State = 222;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << NATIVE) | (1L << OPEN_PAREN))) != 0)) {
						{
						State = 221; expList();
						}
					}

					State = 224; Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DeclareCallContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 227; Match(T__4);
					State = 228; call();
					State = 229; Match(T__5);
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 236; Match(ID);
				State = 237; Match(T__7);
				State = 243;
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 238; Match(OPEN_PAREN);
					State = 240;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << NATIVE) | (1L << OPEN_PAREN))) != 0)) {
						{
						State = 239; expList();
						}
					}

					State = 242; Match(CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new DelayedCall1Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 245; Match(T__4);
					State = 246; call();
					State = 247; Match(T__5);
					}
					}
					State = 253;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 254; Match(ID);
				State = 255; Match(OPEN_BRACK);
				State = 257;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << NATIVE) | (1L << OPEN_PAREN))) != 0)) {
					{
					State = 256; expList();
					}
				}

				State = 259; Match(CLOSE_BRACK);
				}
				break;
			case 4:
				_localctx = new DelayedCall2Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 260; Match(T__4);
					State = 261; call();
					State = 262; Match(T__5);
					}
					}
					State = 268;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 269; Match(ID);
				State = 270; Match(T__6);
				State = 271; Match(OPEN_PAREN);
				State = 273;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << NATIVE) | (1L << OPEN_PAREN))) != 0)) {
					{
					State = 272; expList();
					}
				}

				State = 275; Match(CLOSE_PAREN);
				}
				break;
			case 5:
				_localctx = new DelayedCall2Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 276; Match(T__4);
					State = 277; call();
					State = 278; Match(T__5);
					}
					}
					State = 284;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 285; Match(ID);
				State = 286; Match(T__4);
				State = 288;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__4) | (1L << T__7) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FAIL) | (1L << NULL) | (1L << STRING) | (1L << INT) | (1L << FLOAT) | (1L << ID) | (1L << NATIVE) | (1L << OPEN_PAREN))) != 0)) {
					{
					State = 287; expList();
					}
				}

				State = 290; Match(T__5);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpListContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ExpListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterExpList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitExpList(this);
		}
	}

	[RuleVersion(0)]
	public ExpListContext expList() {
		ExpListContext _localctx = new ExpListContext(Context, State);
		EnterRule(_localctx, 16, RULE_expList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; exp(0);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==T__3) {
				{
				{
				State = 294; Match(T__3);
				State = 295; exp(0);
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulContext : ParserRuleContext {
		public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public RulContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rul; } }
		public override void EnterRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.EnterRul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IslpListener typedListener = listener as IslpListener;
			if (typedListener != null) typedListener.ExitRul(this);
		}
	}

	[RuleVersion(0)]
	public RulContext rul() {
		RulContext _localctx = new RulContext(Context, State);
		EnterRule(_localctx, 18, RULE_rul);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			_la = TokenStream.La(1);
			if (_la==EXPORT) {
				{
				State = 301; Match(EXPORT);
				}
			}

			State = 304; exp(0);
			State = 305; Match(T__23);
			State = 306; exp(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 37);
		case 1: return Precpred(Context, 36);
		case 2: return Precpred(Context, 35);
		case 3: return Precpred(Context, 34);
		case 4: return Precpred(Context, 33);
		case 5: return Precpred(Context, 32);
		case 6: return Precpred(Context, 31);
		case 7: return Precpred(Context, 27);
		case 8: return Precpred(Context, 26);
		case 9: return Precpred(Context, 25);
		case 10: return Precpred(Context, 24);
		case 11: return Precpred(Context, 23);
		case 12: return Precpred(Context, 22);
		case 13: return Precpred(Context, 21);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 19);
		case 16: return Precpred(Context, 18);
		case 17: return Precpred(Context, 17);
		case 18: return Precpred(Context, 16);
		case 19: return Precpred(Context, 15);
		case 20: return Precpred(Context, 13);
		case 21: return Precpred(Context, 12);
		case 22: return Precpred(Context, 8);
		case 23: return Precpred(Context, 7);
		case 24: return Precpred(Context, 6);
		case 25: return Precpred(Context, 5);
		case 26: return Precpred(Context, 4);
		case 27: return Precpred(Context, 40);
		case 28: return Precpred(Context, 39);
		case 29: return Precpred(Context, 14);
		case 30: return Precpred(Context, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x36\x137\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x3\x2\x5\x2\x18\n\x2\x3\x2\x3\x2\x3\x3\x5\x3\x1D"+
		"\n\x3\x3\x3\x3\x3\x3\x3\x5\x3\"\n\x3\x3\x3\x3\x3\x5\x3&\n\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\a\x4\x30\n\x4\f\x4\xE\x4\x33\v"+
		"\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x6\x6L\n\x6\r\x6\xE\x6M\x3\x6\x3\x6\x5\x6R\n\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x5\x6X\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6j\n\x6\x5\x6l\n\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\xC9"+
		"\n\x6\f\x6\xE\x6\xCC\v\x6\x3\a\x3\a\x3\b\x5\b\xD1\n\b\x3\b\x3\b\x3\t\x3"+
		"\t\x3\t\x3\t\a\t\xD9\n\t\f\t\xE\t\xDC\v\t\x3\t\x3\t\x3\t\x5\t\xE1\n\t"+
		"\x3\t\x5\t\xE4\n\t\x3\t\x3\t\x3\t\x3\t\a\t\xEA\n\t\f\t\xE\t\xED\v\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\xF3\n\t\x3\t\x5\t\xF6\n\t\x3\t\x3\t\x3\t\x3\t\a"+
		"\t\xFC\n\t\f\t\xE\t\xFF\v\t\x3\t\x3\t\x3\t\x5\t\x104\n\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\a\t\x10B\n\t\f\t\xE\t\x10E\v\t\x3\t\x3\t\x3\t\x3\t\x5\t\x114"+
		"\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t\x11B\n\t\f\t\xE\t\x11E\v\t\x3\t\x3\t"+
		"\x3\t\x5\t\x123\n\t\x3\t\x5\t\x126\n\t\x3\n\x3\n\x3\n\a\n\x12B\n\n\f\n"+
		"\xE\n\x12E\v\n\x3\v\x5\v\x131\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x2\x3\n\f\x2"+
		"\x4\x6\b\n\f\xE\x10\x12\x14\x2\x3\x3\x2%*\x176\x2\x17\x3\x2\x2\x2\x4\x1C"+
		"\x3\x2\x2\x2\x6,\x3\x2\x2\x2\b\x34\x3\x2\x2\x2\nk\x3\x2\x2\x2\f\xCD\x3"+
		"\x2\x2\x2\xE\xD0\x3\x2\x2\x2\x10\x125\x3\x2\x2\x2\x12\x127\x3\x2\x2\x2"+
		"\x14\x130\x3\x2\x2\x2\x16\x18\a\x33\x2\x2\x17\x16\x3\x2\x2\x2\x17\x18"+
		"\x3\x2\x2\x2\x18\x19\x3\x2\x2\x2\x19\x1A\x5\n\x6\x2\x1A\x3\x3\x2\x2\x2"+
		"\x1B\x1D\a#\x2\x2\x1C\x1B\x3\x2\x2\x2\x1C\x1D\x3\x2\x2\x2\x1D\x1E\x3\x2"+
		"\x2\x2\x1E\x1F\a+\x2\x2\x1F!\a/\x2\x2 \"\x5\x6\x4\x2! \x3\x2\x2\x2!\""+
		"\x3\x2\x2\x2\"%\x3\x2\x2\x2#$\a\x3\x2\x2$&\x5\x6\x4\x2%#\x3\x2\x2\x2%"+
		"&\x3\x2\x2\x2&\'\x3\x2\x2\x2\'(\a\x30\x2\x2()\a\x4\x2\x2)*\x5\n\x6\x2"+
		"*+\a\x5\x2\x2+\x5\x3\x2\x2\x2,\x31\x5\b\x5\x2-.\a\x6\x2\x2.\x30\x5\b\x5"+
		"\x2/-\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2"+
		"\x2\x32\a\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\x5\n\x6\x2\x35\t\x3"+
		"\x2\x2\x2\x36\x37\b\x6\x1\x2\x37\x38\a\n\x2\x2\x38l\x5\n\x6(\x39:\a\x12"+
		"\x2\x2:l\x5\n\x6 ;<\a\x13\x2\x2<l\x5\n\x6\x1F=>\a\x14\x2\x2>l\x5\n\x6"+
		"\x1E?@\a\x1F\x2\x2@l\x5\n\x6\r\x41\x42\a \x2\x2\x42l\x5\n\x6\f\x43\x44"+
		"\a!\x2\x2\x44l\x5\n\x6\v\x45\x46\a\x3\x2\x2\x46l\x5\n\x6\x4GH\a\a\x2\x2"+
		"HI\x5\x10\t\x2IJ\a\b\x2\x2JL\x3\x2\x2\x2KG\x3\x2\x2\x2LM\x3\x2\x2\x2M"+
		"K\x3\x2\x2\x2MN\x3\x2\x2\x2NQ\x3\x2\x2\x2OR\x5\f\a\x2PR\x5\xE\b\x2QO\x3"+
		"\x2\x2\x2QP\x3\x2\x2\x2Rl\x3\x2\x2\x2SX\x5\f\a\x2TX\x5\x10\t\x2UX\x5\xE"+
		"\b\x2VX\t\x2\x2\x2WS\x3\x2\x2\x2WT\x3\x2\x2\x2WU\x3\x2\x2\x2WV\x3\x2\x2"+
		"\x2Xl\x3\x2\x2\x2YZ\a/\x2\x2Z[\x5\n\x6\x2[\\\a\x30\x2\x2\\l\x3\x2\x2\x2"+
		"]^\a/\x2\x2^_\a\x15\x2\x2_j\a\x30\x2\x2`\x61\a/\x2\x2\x61\x62\a\x12\x2"+
		"\x2\x62j\a\x30\x2\x2\x63\x64\a/\x2\x2\x64\x65\a\r\x2\x2\x65j\a\x30\x2"+
		"\x2\x66g\a/\x2\x2gh\a\f\x2\x2hj\a\x30\x2\x2i]\x3\x2\x2\x2i`\x3\x2\x2\x2"+
		"i\x63\x3\x2\x2\x2i\x66\x3\x2\x2\x2jl\x3\x2\x2\x2k\x36\x3\x2\x2\x2k\x39"+
		"\x3\x2\x2\x2k;\x3\x2\x2\x2k=\x3\x2\x2\x2k?\x3\x2\x2\x2k\x41\x3\x2\x2\x2"+
		"k\x43\x3\x2\x2\x2k\x45\x3\x2\x2\x2kK\x3\x2\x2\x2kW\x3\x2\x2\x2kY\x3\x2"+
		"\x2\x2ki\x3\x2\x2\x2l\xCA\x3\x2\x2\x2mn\f\'\x2\x2no\a\v\x2\x2o\xC9\x5"+
		"\n\x6(pq\f&\x2\x2qr\a\f\x2\x2r\xC9\x5\n\x6\'st\f%\x2\x2tu\a\r\x2\x2u\xC9"+
		"\x5\n\x6&vw\f$\x2\x2wx\a\xE\x2\x2x\xC9\x5\n\x6%yz\f#\x2\x2z{\a\xF\x2\x2"+
		"{\xC9\x5\n\x6$|}\f\"\x2\x2}~\a\x10\x2\x2~\xC9\x5\n\x6#\x7F\x80\f!\x2\x2"+
		"\x80\x81\a\x11\x2\x2\x81\xC9\x5\n\x6\"\x82\x83\f\x1D\x2\x2\x83\x84\a\x12"+
		"\x2\x2\x84\xC9\x5\n\x6\x1E\x85\x86\f\x1C\x2\x2\x86\x87\a\x15\x2\x2\x87"+
		"\xC9\x5\n\x6\x1D\x88\x89\f\x1B\x2\x2\x89\x8A\a\x14\x2\x2\x8A\xC9\x5\n"+
		"\x6\x1C\x8B\x8C\f\x1A\x2\x2\x8C\x8D\a\x13\x2\x2\x8D\xC9\x5\n\x6\x1B\x8E"+
		"\x8F\f\x19\x2\x2\x8F\x90\a\x16\x2\x2\x90\xC9\x5\n\x6\x1A\x91\x92\f\x18"+
		"\x2\x2\x92\x93\a\x17\x2\x2\x93\xC9\x5\n\x6\x19\x94\x95\f\x17\x2\x2\x95"+
		"\x96\a\x18\x2\x2\x96\xC9\x5\n\x6\x18\x97\x98\f\x16\x2\x2\x98\x99\a\x19"+
		"\x2\x2\x99\xC9\x5\n\x6\x17\x9A\x9B\f\x15\x2\x2\x9B\x9C\a\x1A\x2\x2\x9C"+
		"\xC9\x5\n\x6\x16\x9D\x9E\f\x14\x2\x2\x9E\x9F\a\a\x2\x2\x9F\xC9\x5\n\x6"+
		"\x15\xA0\xA1\f\x13\x2\x2\xA1\xA2\a\b\x2\x2\xA2\xC9\x5\n\x6\x14\xA3\xA4"+
		"\f\x12\x2\x2\xA4\xA5\a\x1B\x2\x2\xA5\xC9\x5\n\x6\x13\xA6\xA7\f\x11\x2"+
		"\x2\xA7\xA8\a\x1C\x2\x2\xA8\xC9\x5\n\x6\x12\xA9\xAA\f\xF\x2\x2\xAA\xAB"+
		"\a\x6\x2\x2\xAB\xC9\x5\n\x6\x10\xAC\xAD\f\xE\x2\x2\xAD\xAE\a\x1E\x2\x2"+
		"\xAE\xC9\x5\n\x6\xF\xAF\xB0\f\n\x2\x2\xB0\xB1\a\x1F\x2\x2\xB1\xC9\x5\n"+
		"\x6\v\xB2\xB3\f\t\x2\x2\xB3\xB4\a \x2\x2\xB4\xC9\x5\n\x6\n\xB5\xB6\f\b"+
		"\x2\x2\xB6\xB7\a!\x2\x2\xB7\xC9\x5\n\x6\t\xB8\xB9\f\a\x2\x2\xB9\xBA\a"+
		"\x3\x2\x2\xBA\xC9\x5\n\x6\b\xBB\xBC\f\x6\x2\x2\xBC\xBD\a\"\x2\x2\xBD\xC9"+
		"\x5\n\x6\a\xBE\xBF\f*\x2\x2\xBF\xC0\a\x5\x2\x2\xC0\xC9\a+\x2\x2\xC1\xC2"+
		"\f)\x2\x2\xC2\xC9\a\t\x2\x2\xC3\xC4\f\x10\x2\x2\xC4\xC5\a\x1D\x2\x2\xC5"+
		"\xC9\x5\f\a\x2\xC6\xC7\f\x5\x2\x2\xC7\xC9\a\x6\x2\x2\xC8m\x3\x2\x2\x2"+
		"\xC8p\x3\x2\x2\x2\xC8s\x3\x2\x2\x2\xC8v\x3\x2\x2\x2\xC8y\x3\x2\x2\x2\xC8"+
		"|\x3\x2\x2\x2\xC8\x7F\x3\x2\x2\x2\xC8\x82\x3\x2\x2\x2\xC8\x85\x3\x2\x2"+
		"\x2\xC8\x88\x3\x2\x2\x2\xC8\x8B\x3\x2\x2\x2\xC8\x8E\x3\x2\x2\x2\xC8\x91"+
		"\x3\x2\x2\x2\xC8\x94\x3\x2\x2\x2\xC8\x97\x3\x2\x2\x2\xC8\x9A\x3\x2\x2"+
		"\x2\xC8\x9D\x3\x2\x2\x2\xC8\xA0\x3\x2\x2\x2\xC8\xA3\x3\x2\x2\x2\xC8\xA6"+
		"\x3\x2\x2\x2\xC8\xA9\x3\x2\x2\x2\xC8\xAC\x3\x2\x2\x2\xC8\xAF\x3\x2\x2"+
		"\x2\xC8\xB2\x3\x2\x2\x2\xC8\xB5\x3\x2\x2\x2\xC8\xB8\x3\x2\x2\x2\xC8\xBB"+
		"\x3\x2\x2\x2\xC8\xBE\x3\x2\x2\x2\xC8\xC1\x3\x2\x2\x2\xC8\xC3\x3\x2\x2"+
		"\x2\xC8\xC6\x3\x2\x2\x2\xC9\xCC\x3\x2\x2\x2\xCA\xC8\x3\x2\x2\x2\xCA\xCB"+
		"\x3\x2\x2\x2\xCB\v\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xCE\a+\x2\x2\xCE"+
		"\r\x3\x2\x2\x2\xCF\xD1\a+\x2\x2\xD0\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2"+
		"\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a,\x2\x2\xD3\xF\x3\x2\x2\x2\xD4\xD5\a\a\x2"+
		"\x2\xD5\xD6\x5\x10\t\x2\xD6\xD7\a\b\x2\x2\xD7\xD9\x3\x2\x2\x2\xD8\xD4"+
		"\x3\x2\x2\x2\xD9\xDC\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDA\xDB\x3\x2\x2"+
		"\x2\xDB\xDD\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDD\xE3\a+\x2\x2\xDE\xE0\a"+
		"/\x2\x2\xDF\xE1\x5\x12\n\x2\xE0\xDF\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1"+
		"\xE2\x3\x2\x2\x2\xE2\xE4\a\x30\x2\x2\xE3\xDE\x3\x2\x2\x2\xE3\xE4\x3\x2"+
		"\x2\x2\xE4\x126\x3\x2\x2\x2\xE5\xE6\a\a\x2\x2\xE6\xE7\x5\x10\t\x2\xE7"+
		"\xE8\a\b\x2\x2\xE8\xEA\x3\x2\x2\x2\xE9\xE5\x3\x2\x2\x2\xEA\xED\x3\x2\x2"+
		"\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEE\x3\x2\x2\x2\xED\xEB"+
		"\x3\x2\x2\x2\xEE\xEF\a+\x2\x2\xEF\xF5\a\n\x2\x2\xF0\xF2\a/\x2\x2\xF1\xF3"+
		"\x5\x12\n\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3\xF4\x3\x2\x2"+
		"\x2\xF4\xF6\a\x30\x2\x2\xF5\xF0\x3\x2\x2\x2\xF5\xF6\x3\x2\x2\x2\xF6\x126"+
		"\x3\x2\x2\x2\xF7\xF8\a\a\x2\x2\xF8\xF9\x5\x10\t\x2\xF9\xFA\a\b\x2\x2\xFA"+
		"\xFC\x3\x2\x2\x2\xFB\xF7\x3\x2\x2\x2\xFC\xFF\x3\x2\x2\x2\xFD\xFB\x3\x2"+
		"\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x100\x3\x2\x2\x2\xFF\xFD\x3\x2\x2\x2\x100"+
		"\x101\a+\x2\x2\x101\x103\a\x31\x2\x2\x102\x104\x5\x12\n\x2\x103\x102\x3"+
		"\x2\x2\x2\x103\x104\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\x126\a\x32"+
		"\x2\x2\x106\x107\a\a\x2\x2\x107\x108\x5\x10\t\x2\x108\x109\a\b\x2\x2\x109"+
		"\x10B\x3\x2\x2\x2\x10A\x106\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10A"+
		"\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10F\x3\x2\x2\x2\x10E\x10C\x3"+
		"\x2\x2\x2\x10F\x110\a+\x2\x2\x110\x111\a\t\x2\x2\x111\x113\a/\x2\x2\x112"+
		"\x114\x5\x12\n\x2\x113\x112\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114\x115"+
		"\x3\x2\x2\x2\x115\x126\a\x30\x2\x2\x116\x117\a\a\x2\x2\x117\x118\x5\x10"+
		"\t\x2\x118\x119\a\b\x2\x2\x119\x11B\x3\x2\x2\x2\x11A\x116\x3\x2\x2\x2"+
		"\x11B\x11E\x3\x2\x2\x2\x11C\x11A\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2\x11D"+
		"\x11F\x3\x2\x2\x2\x11E\x11C\x3\x2\x2\x2\x11F\x120\a+\x2\x2\x120\x122\a"+
		"\a\x2\x2\x121\x123\x5\x12\n\x2\x122\x121\x3\x2\x2\x2\x122\x123\x3\x2\x2"+
		"\x2\x123\x124\x3\x2\x2\x2\x124\x126\a\b\x2\x2\x125\xDA\x3\x2\x2\x2\x125"+
		"\xEB\x3\x2\x2\x2\x125\xFD\x3\x2\x2\x2\x125\x10C\x3\x2\x2\x2\x125\x11C"+
		"\x3\x2\x2\x2\x126\x11\x3\x2\x2\x2\x127\x12C\x5\n\x6\x2\x128\x129\a\x6"+
		"\x2\x2\x129\x12B\x5\n\x6\x2\x12A\x128\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2"+
		"\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x13\x3\x2\x2\x2\x12E"+
		"\x12C\x3\x2\x2\x2\x12F\x131\a#\x2\x2\x130\x12F\x3\x2\x2\x2\x130\x131\x3"+
		"\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x5\n\x6\x2\x133\x134\a\x1A\x2"+
		"\x2\x134\x135\x5\n\x6\x2\x135\x15\x3\x2\x2\x2\x1E\x17\x1C!%\x31MQWik\xC8"+
		"\xCA\xD0\xDA\xE0\xE3\xEB\xF2\xF5\xFD\x103\x10C\x113\x11C\x122\x125\x12C"+
		"\x130";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
