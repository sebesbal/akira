//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from slp.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="slpParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public interface IslpListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] slpParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] slpParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] slpParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] slpParser.PredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.decList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDecList([NotNull] slpParser.DecListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.decList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDecList([NotNull] slpParser.DecListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] slpParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] slpParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Switch</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSwitch([NotNull] slpParser.SwitchContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Switch</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSwitch([NotNull] slpParser.SwitchContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Sugar</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSugar([NotNull] slpParser.SugarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sugar</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSugar([NotNull] slpParser.SugarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Associative</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssociative([NotNull] slpParser.AssociativeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Associative</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssociative([NotNull] slpParser.AssociativeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Member</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMember([NotNull] slpParser.MemberContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Member</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMember([NotNull] slpParser.MemberContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Binary</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBinary([NotNull] slpParser.BinaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Binary</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBinary([NotNull] slpParser.BinaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpVar</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpVar([NotNull] slpParser.OpVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpVar</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpVar([NotNull] slpParser.OpVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Operator</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOperator([NotNull] slpParser.OperatorContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Operator</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOperator([NotNull] slpParser.OperatorContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>OpVarUnary</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOpVarUnary([NotNull] slpParser.OpVarUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>OpVarUnary</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOpVarUnary([NotNull] slpParser.OpVarUnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Para</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPara([NotNull] slpParser.ParaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Para</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPara([NotNull] slpParser.ParaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNot([NotNull] slpParser.NotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Not</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNot([NotNull] slpParser.NotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Sing</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSing([NotNull] slpParser.SingContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Sing</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSing([NotNull] slpParser.SingContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Question</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterQuestion([NotNull] slpParser.QuestionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Question</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitQuestion([NotNull] slpParser.QuestionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Attribute</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAttribute([NotNull] slpParser.AttributeContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Attribute</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAttribute([NotNull] slpParser.AttributeContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>Min</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMin([NotNull] slpParser.MinContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>Min</c>
	/// labeled alternative in <see cref="slpParser.exp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMin([NotNull] slpParser.MinContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] slpParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.id"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] slpParser.IdContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.nat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNat([NotNull] slpParser.NatContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.nat"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNat([NotNull] slpParser.NatContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NormalCall</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNormalCall([NotNull] slpParser.NormalCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NormalCall</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNormalCall([NotNull] slpParser.NormalCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DeclareCall</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclareCall([NotNull] slpParser.DeclareCallContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DeclareCall</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclareCall([NotNull] slpParser.DeclareCallContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DelayedCall1</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDelayedCall1([NotNull] slpParser.DelayedCall1Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DelayedCall1</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDelayedCall1([NotNull] slpParser.DelayedCall1Context context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DelayedCall2</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDelayedCall2([NotNull] slpParser.DelayedCall2Context context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DelayedCall2</c>
	/// labeled alternative in <see cref="slpParser.call"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDelayedCall2([NotNull] slpParser.DelayedCall2Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.expList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpList([NotNull] slpParser.ExpListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.expList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpList([NotNull] slpParser.ExpListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="slpParser.rul"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRul([NotNull] slpParser.RulContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="slpParser.rul"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRul([NotNull] slpParser.RulContext context);
}
